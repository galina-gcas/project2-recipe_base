from flask import Flask, request, jsonify
import threading
import time
import os
from bot import bot
from config import BOT_TOKEN

app = Flask(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞ –±–æ—Ç–∞
bot_thread = None
bot_running = False

def run_bot():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    global bot_running
    try:
        print("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        bot_running = True
        bot.infinity_polling(none_stop=True, interval=0, timeout=20)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")
        bot_running = False

@app.route('/')
def home():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
    status = "üü¢ –†–∞–±–æ—Ç–∞–µ—Ç" if bot_running else "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    return f"""
    <html>
        <head>
            <title>Recipe Bot Status</title>
            <meta charset="utf-8">
            <style>
                body {{ font-family: Arial, sans-serif; margin: 40px; }}
                .status {{ font-size: 24px; margin: 20px 0; }}
                .info {{ background: #f0f0f0; padding: 20px; border-radius: 5px; }}
            </style>
        </head>
        <body>
            <h1>üçΩÔ∏è Recipe Telegram Bot</h1>
            <div class="status">–°—Ç–∞—Ç—É—Å: {status}</div>
            <div class="info">
                <h3>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:</h3>
                <p>‚Ä¢ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ</p>
                <p>‚Ä¢ API: TheMealDB</p>
                <p>‚Ä¢ –§—É–Ω–∫—Ü–∏–∏: –ø–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ</p>
                <p>‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: SQLite</p>
            </div>
            <div class="info">
                <h3>–î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:</h3>
                <ul>
                    <li><code>GET /</code> - –≠—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞</li>
                    <li><code>GET /status</code> - –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ (JSON)</li>
                    <li><code>POST /start</code> - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞</li>
                    <li><code>POST /stop</code> - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞</li>
                    <li><code>GET /health</code> - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</li>
                    <li><code>GET /ping</code> - –ü—Ä–æ—Å—Ç–æ–π –ø–∏–Ω–≥ –¥–ª—è UptimeRobot</li>
                    <li><code>GET /uptime</code> - –°—Ç–∞—Ç—É—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</li>
                </ul>
            </div>
            <div class="info">
                <h3>üîî UptimeRobot –Ω–∞—Å—Ç—Ä–æ–π–∫–∞:</h3>
                <p>–î–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è "–∑–∞—Å—ã–ø–∞–Ω–∏—è" –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:</p>
                <ul>
                    <li><strong>URL:</strong> <code>https://yourusername.pythonanywhere.com/ping</code></li>
                    <li><strong>–ò–Ω—Ç–µ—Ä–≤–∞–ª:</strong> 5 –º–∏–Ω—É—Ç</li>
                    <li><strong>–¢–∏–ø:</strong> HTTP(s)</li>
                </ul>
            </div>
        </body>
    </html>
    """

@app.route('/status')
def status():
    """API —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞"""
    return jsonify({
        'bot_running': bot_running,
        'bot_token_configured': bool(BOT_TOKEN),
        'status': 'running' if bot_running else 'stopped',
        'timestamp': time.time()
    })

@app.route('/start', methods=['POST'])
def start_bot():
    """API —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    global bot_thread, bot_running
    
    if bot_running:
        return jsonify({'message': '–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω', 'status': 'already_running'})
    
    if not BOT_TOKEN:
        return jsonify({'error': 'BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}, 400)
    
    try:
        bot_thread = threading.Thread(target=run_bot, daemon=True)
        bot_thread.start()
        
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –±–æ—Ç –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
        time.sleep(2)
        
        return jsonify({
            'message': '–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω',
            'status': 'started',
            'bot_running': bot_running
        })
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {str(e)}'}, 500)

@app.route('/stop', methods=['POST'])
def stop_bot():
    """API —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞"""
    global bot_running
    
    if not bot_running:
        return jsonify({'message': '–ë–æ—Ç —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', 'status': 'already_stopped'})
    
    try:
        bot.stop_polling()
        bot_running = False
        return jsonify({
            'message': '–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
            'status': 'stopped',
            'bot_running': bot_running
        })
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞: {str(e)}'}, 500)

@app.route('/health')
def health_check():
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    return jsonify({
        'status': 'healthy',
        'bot_running': bot_running,
        'timestamp': time.time()
    })

@app.route('/ping')
def ping():
    """–ü—Ä–æ—Å—Ç–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è UptimeRobot - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å"""
    return "OK", 200

@app.route('/uptime')
def uptime():
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è UptimeRobot —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
    return jsonify({
        'status': 'online',
        'bot_running': bot_running,
        'uptime': time.time(),
        'message': 'Recipe Bot is running'
    }), 200

@app.route('/webhook', methods=['POST'])
def webhook():
    """Webhook –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ polling)"""
    if request.is_json:
        update = request.get_json()
        try:
            bot.process_new_updates([update])
            return jsonify({'status': 'ok'})
        except Exception as e:
            return jsonify({'error': str(e)}, 500)
    return jsonify({'error': 'Invalid request'}, 400)

if __name__ == '__main__':
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
    if not BOT_TOKEN:
        print("‚ùå BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª —Å —Ç–æ–∫–µ–Ω–æ–º.")
        print("–ü—Ä–∏–º–µ—Ä: BOT_TOKEN=your_bot_token_here")
    else:
        print("‚úÖ BOT_TOKEN –Ω–∞–π–¥–µ–Ω")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    print("üöÄ –ó–∞–ø—É—Å–∫ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    app.run(debug=False, host='0.0.0.0', port=5000)
