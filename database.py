import sqlite3
import json
from datetime import datetime
from config import DATABASE_NAME

class RecipeDatabase:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤"""
    
    def __init__(self):
        self.db_name = DATABASE_NAME
        self.init_database()
    
    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü"""
        try:
            with sqlite3.connect(self.db_name) as conn:
                cursor = conn.cursor()
                
                # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤
                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS favorites (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        user_id INTEGER NOT NULL,
                        recipe_id TEXT NOT NULL,
                        recipe_name TEXT NOT NULL,
                        recipe_data TEXT NOT NULL,
                        image_url TEXT,
                        category TEXT,
                        area TEXT,
                        rating INTEGER DEFAULT 0,
                        saved_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        UNIQUE(user_id, recipe_id)
                    )
                ''')
                
                # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                cursor.execute('''
                    CREATE INDEX IF NOT EXISTS idx_user_id 
                    ON favorites(user_id)
                ''')
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ rating –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ç–∞–±–ª–∏—Ü–µ
                cursor.execute("PRAGMA table_info(favorites)")
                columns = [column[1] for column in cursor.fetchall()]
                
                # –ï—Å–ª–∏ –∫–æ–ª–æ–Ω–∫–∏ rating –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë
                if 'rating' not in columns:
                    cursor.execute('ALTER TABLE favorites ADD COLUMN rating INTEGER DEFAULT 0')
                    print("üîß –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ rating –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ç–∞–±–ª–∏—Ü–µ")
                
                conn.commit()
                print("üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
                
        except sqlite3.Error as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    def add_favorite(self, user_id, recipe_data):
        """–î–æ–±–∞–≤–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"""
        try:
            with sqlite3.connect(self.db_name) as conn:
                cursor = conn.cursor()
                
                recipe_id = recipe_data.get('idMeal')
                recipe_name = recipe_data.get('strMeal', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –±–ª—é–¥–æ')
                image_url = recipe_data.get('strMealThumb', '')
                category = recipe_data.get('strCategory', '')
                area = recipe_data.get('strArea', '')
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç–∞ –≤ JSON
                recipe_json = json.dumps(recipe_data, ensure_ascii=False)
                
                cursor.execute('''
                    INSERT OR REPLACE INTO favorites 
                    (user_id, recipe_id, recipe_name, recipe_data, image_url, category, area, rating)
                    VALUES (?, ?, ?, ?, ?, ?, ?, 0)
                ''', (user_id, recipe_id, recipe_name, recipe_json, image_url, category, area))
                
                conn.commit()
                return True
                
        except sqlite3.Error as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ: {e}")
            return False
    
    def remove_favorite(self, user_id, recipe_id):
        """–£–¥–∞–ª–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
        try:
            with sqlite3.connect(self.db_name) as conn:
                cursor = conn.cursor()
                
                cursor.execute('''
                    DELETE FROM favorites 
                    WHERE user_id = ? AND recipe_id = ?
                ''', (user_id, recipe_id))
                
                conn.commit()
                return cursor.rowcount > 0
                
        except sqlite3.Error as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: {e}")
            return False
    
    def get_user_favorites(self, user_id, limit=50):
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            with sqlite3.connect(self.db_name) as conn:
                cursor = conn.cursor()
                
                cursor.execute('''
                    SELECT recipe_id, recipe_name, recipe_data, image_url, 
                           category, area, rating, saved_at
                    FROM favorites 
                    WHERE user_id = ? 
                    ORDER BY rating DESC, saved_at DESC 
                    LIMIT ?
                ''', (user_id, limit))
                
                favorites = []
                for row in cursor.fetchall():
                    recipe_id, recipe_name, recipe_data, image_url, category, area, rating, saved_at = row
                    
                    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç–∞ –∏–∑ JSON
                    try:
                        recipe_json = json.loads(recipe_data)
                    except json.JSONDecodeError:
                        recipe_json = {}
                    
                    favorites.append({
                        'recipe_id': recipe_id,
                        'recipe_name': recipe_name,
                        'recipe_data': recipe_json,
                        'image_url': image_url,
                        'category': category,
                        'area': area,
                        'rating': rating,
                        'saved_at': saved_at
                    })
                
                return favorites
                
        except sqlite3.Error as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: {e}")
            return []
    
    def is_favorite(self, user_id, recipe_id):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ —Ä–µ—Ü–µ–ø—Ç –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            with sqlite3.connect(self.db_name) as conn:
                cursor = conn.cursor()
                
                cursor.execute('''
                    SELECT 1 FROM favorites 
                    WHERE user_id = ? AND recipe_id = ?
                ''', (user_id, recipe_id))
                
                return cursor.fetchone() is not None
                
        except sqlite3.Error as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: {e}")
            return False
    
    def get_favorites_count(self, user_id):
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            with sqlite3.connect(self.db_name) as conn:
                cursor = conn.cursor()
                
                cursor.execute('''
                    SELECT COUNT(*) FROM favorites WHERE user_id = ?
                ''', (user_id,))
                
                result = cursor.fetchone()
                return result[0] if result else 0
                
        except sqlite3.Error as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: {e}")
            return 0
    
    def get_favorite_by_id(self, user_id, recipe_id):
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∏–∑–±—Ä–∞–Ω–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç"""
        try:
            with sqlite3.connect(self.db_name) as conn:
                cursor = conn.cursor()
                
                cursor.execute('''
                    SELECT recipe_data, rating FROM favorites 
                    WHERE user_id = ? AND recipe_id = ?
                ''', (user_id, recipe_id))
                
                result = cursor.fetchone()
                if result:
                    try:
                        recipe_data = json.loads(result[0])
                        recipe_data['rating'] = result[1]  # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –∫ –¥–∞–Ω–Ω—ã–º —Ä–µ—Ü–µ–ø—Ç–∞
                        return recipe_data
                    except json.JSONDecodeError:
                        return None
                return None
                
        except sqlite3.Error as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞: {e}")
            return None
    
    def update_rating(self, user_id, recipe_id, rating):
        """–û–±–Ω–æ–≤–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ —Ä–µ—Ü–µ–ø—Ç–∞"""
        try:
            with sqlite3.connect(self.db_name) as conn:
                cursor = conn.cursor()
                
                cursor.execute('''
                    UPDATE favorites 
                    SET rating = ? 
                    WHERE user_id = ? AND recipe_id = ?
                ''', (rating, user_id, recipe_id))
                
                conn.commit()
                return cursor.rowcount > 0
                
        except sqlite3.Error as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞: {e}")
            return False
    
    def cleanup_old_favorites(self, days=365):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤ (—Å—Ç–∞—Ä—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π)"""
        try:
            with sqlite3.connect(self.db_name) as conn:
                cursor = conn.cursor()
                
                cursor.execute('''
                    DELETE FROM favorites 
                    WHERE saved_at < datetime('now', '-{} days')
                '''.format(days))
                
                deleted_count = cursor.rowcount
                conn.commit()
                
                if deleted_count > 0:
                    print(f"üßπ –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä—ã—Ö –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤")
                
                return deleted_count
                
        except sqlite3.Error as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            return 0

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = RecipeDatabase()

